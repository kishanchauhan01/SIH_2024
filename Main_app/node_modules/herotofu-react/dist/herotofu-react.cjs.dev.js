'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');

function _regeneratorRuntime() {
  _regeneratorRuntime = function () {
    return e;
  };
  var t,
    e = {},
    r = Object.prototype,
    n = r.hasOwnProperty,
    o = Object.defineProperty || function (t, e, r) {
      t[e] = r.value;
    },
    i = "function" == typeof Symbol ? Symbol : {},
    a = i.iterator || "@@iterator",
    c = i.asyncIterator || "@@asyncIterator",
    u = i.toStringTag || "@@toStringTag";
  function define(t, e, r) {
    return Object.defineProperty(t, e, {
      value: r,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), t[e];
  }
  try {
    define({}, "");
  } catch (t) {
    define = function (t, e, r) {
      return t[e] = r;
    };
  }
  function wrap(t, e, r, n) {
    var i = e && e.prototype instanceof Generator ? e : Generator,
      a = Object.create(i.prototype),
      c = new Context(n || []);
    return o(a, "_invoke", {
      value: makeInvokeMethod(t, r, c)
    }), a;
  }
  function tryCatch(t, e, r) {
    try {
      return {
        type: "normal",
        arg: t.call(e, r)
      };
    } catch (t) {
      return {
        type: "throw",
        arg: t
      };
    }
  }
  e.wrap = wrap;
  var h = "suspendedStart",
    l = "suspendedYield",
    f = "executing",
    s = "completed",
    y = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var p = {};
  define(p, a, function () {
    return this;
  });
  var d = Object.getPrototypeOf,
    v = d && d(d(values([])));
  v && v !== r && n.call(v, a) && (p = v);
  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
  function defineIteratorMethods(t) {
    ["next", "throw", "return"].forEach(function (e) {
      define(t, e, function (t) {
        return this._invoke(e, t);
      });
    });
  }
  function AsyncIterator(t, e) {
    function invoke(r, o, i, a) {
      var c = tryCatch(t[r], t, o);
      if ("throw" !== c.type) {
        var u = c.arg,
          h = u.value;
        return h && "object" == typeof h && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
          invoke("next", t, i, a);
        }, function (t) {
          invoke("throw", t, i, a);
        }) : e.resolve(h).then(function (t) {
          u.value = t, i(u);
        }, function (t) {
          return invoke("throw", t, i, a);
        });
      }
      a(c.arg);
    }
    var r;
    o(this, "_invoke", {
      value: function (t, n) {
        function callInvokeWithMethodAndArg() {
          return new e(function (e, r) {
            invoke(t, n, e, r);
          });
        }
        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(e, r, n) {
    var o = h;
    return function (i, a) {
      if (o === f) throw Error("Generator is already running");
      if (o === s) {
        if ("throw" === i) throw a;
        return {
          value: t,
          done: !0
        };
      }
      for (n.method = i, n.arg = a;;) {
        var c = n.delegate;
        if (c) {
          var u = maybeInvokeDelegate(c, n);
          if (u) {
            if (u === y) continue;
            return u;
          }
        }
        if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
          if (o === h) throw o = s, n.arg;
          n.dispatchException(n.arg);
        } else "return" === n.method && n.abrupt("return", n.arg);
        o = f;
        var p = tryCatch(e, r, n);
        if ("normal" === p.type) {
          if (o = n.done ? s : l, p.arg === y) continue;
          return {
            value: p.arg,
            done: n.done
          };
        }
        "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
      }
    };
  }
  function maybeInvokeDelegate(e, r) {
    var n = r.method,
      o = e.iterator[n];
    if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
    var i = tryCatch(o, e.iterator, r.arg);
    if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
    var a = i.arg;
    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
  }
  function pushTryEntry(t) {
    var e = {
      tryLoc: t[0]
    };
    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
  }
  function resetTryEntry(t) {
    var e = t.completion || {};
    e.type = "normal", delete e.arg, t.completion = e;
  }
  function Context(t) {
    this.tryEntries = [{
      tryLoc: "root"
    }], t.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(e) {
    if (e || "" === e) {
      var r = e[a];
      if (r) return r.call(e);
      if ("function" == typeof e.next) return e;
      if (!isNaN(e.length)) {
        var o = -1,
          i = function next() {
            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
            return next.value = t, next.done = !0, next;
          };
        return i.next = i;
      }
    }
    throw new TypeError(typeof e + " is not iterable");
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), o(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
    var e = "function" == typeof t && t.constructor;
    return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
  }, e.mark = function (t) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
  }, e.awrap = function (t) {
    return {
      __await: t
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
    return this;
  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
    void 0 === i && (i = Promise);
    var a = new AsyncIterator(wrap(t, r, n, o), i);
    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
      return t.done ? t.value : a.next();
    });
  }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
    return this;
  }), define(g, "toString", function () {
    return "[object Generator]";
  }), e.keys = function (t) {
    var e = Object(t),
      r = [];
    for (var n in e) r.push(n);
    return r.reverse(), function next() {
      for (; r.length;) {
        var t = r.pop();
        if (t in e) return next.value = t, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, e.values = values, Context.prototype = {
    constructor: Context,
    reset: function (e) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
    },
    stop: function () {
      this.done = !0;
      var t = this.tryEntries[0].completion;
      if ("throw" === t.type) throw t.arg;
      return this.rval;
    },
    dispatchException: function (e) {
      if (this.done) throw e;
      var r = this;
      function handle(n, o) {
        return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
      }
      for (var o = this.tryEntries.length - 1; o >= 0; --o) {
        var i = this.tryEntries[o],
          a = i.completion;
        if ("root" === i.tryLoc) return handle("end");
        if (i.tryLoc <= this.prev) {
          var c = n.call(i, "catchLoc"),
            u = n.call(i, "finallyLoc");
          if (c && u) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          } else if (c) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
          } else {
            if (!u) throw Error("try statement without catch or finally");
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          }
        }
      }
    },
    abrupt: function (t, e) {
      for (var r = this.tryEntries.length - 1; r >= 0; --r) {
        var o = this.tryEntries[r];
        if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
          var i = o;
          break;
        }
      }
      i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
      var a = i ? i.completion : {};
      return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
    },
    complete: function (t, e) {
      if ("throw" === t.type) throw t.arg;
      return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
    },
    finish: function (t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
      }
    },
    catch: function (t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.tryLoc === t) {
          var n = r.completion;
          if ("throw" === n.type) {
            var o = n.arg;
            resetTryEntry(r);
          }
          return o;
        }
      }
      throw Error("illegal catch attempt");
    },
    delegateYield: function (e, r, n) {
      return this.delegate = {
        iterator: values(e),
        resultName: r,
        nextLoc: n
      }, "next" === this.method && (this.arg = t), y;
    }
  }, e;
}

function toPrimitive(t, r) {
  if ("object" != typeof t || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}

function toPropertyKey(t) {
  var i = toPrimitive(t, "string");
  return "symbol" == typeof i ? i : i + "";
}

function _defineProperty(obj, key, value) {
  key = toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      _defineProperty(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e,
      n,
      i,
      u,
      a = [],
      f = !0,
      o = !1;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t) return;
        f = !1;
      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
    } catch (r) {
      o = !0, n = r;
    } finally {
      try {
        if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

var HEROTOFU_STATUS_RATELIMIT = 429;
var HEROTOFU_STATUS_SPAMBOT = 422;
function getFormEndpoint(formId) {
  return formId.startsWith('https://') ? formId : "https://public.herotofu.com/v1/".concat(formId);
}
function filterInjectedData(injectedData) {
  return Object.entries(injectedData || {}).filter(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
      value = _ref2[1];
    return value !== undefined;
  }).reduce(function (acc, _ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
      key = _ref4[0],
      value = _ref4[1];
    return _objectSpread2(_objectSpread2({}, acc), {}, _defineProperty({}, key, value));
  }, {}) || {};
}
function fetchWithTimeout(_x) {
  return _fetchWithTimeout.apply(this, arguments);
}
function _fetchWithTimeout() {
  _fetchWithTimeout = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(resource) {
    var options,
      _options$timeout,
      timeout,
      controller,
      id,
      response,
      _args = arguments;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
          _options$timeout = options.timeout, timeout = _options$timeout === void 0 ? 30000 : _options$timeout;
          controller = new AbortController();
          id = setTimeout(function () {
            return controller.abort();
          }, timeout);
          _context.next = 6;
          return fetch(resource, _objectSpread2(_objectSpread2({
            redirect: 'manual'
          }, options), {}, {
            signal: controller.signal
          }));
        case 6:
          response = _context.sent;
          clearTimeout(id);
          return _context.abrupt("return", response);
        case 9:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _fetchWithTimeout.apply(this, arguments);
}

function useFormData(formIdOrUrl) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var shouldBlockFormSubmit = react.useRef(false);
  var _useState = react.useState({
      status: 'not_initialized'
    }),
    _useState2 = _slicedToArray(_useState, 2),
    formState = _useState2[0],
    setFormState = _useState2[1];
  var updateState = react.useCallback(function (newState, callbackOnComplete) {
    shouldBlockFormSubmit.current = newState.status === 'loading';
    setFormState(newState);
    if (newState.status === 'success' || newState.status === 'error') {
      callbackOnComplete === null || callbackOnComplete === void 0 || callbackOnComplete(newState);
    }
  }, []);
  var getFormSubmitHandler = react.useCallback(function (callbackOnComplete, injectedData) {
    return /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(formEvent) {
        var data, response, retryResponse;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              formEvent.preventDefault();
              if (!shouldBlockFormSubmit.current) {
                _context.next = 3;
                break;
              }
              return _context.abrupt("return");
            case 3:
              data = extractFormData(formEvent, injectedData);
              updateState({
                status: 'loading',
                data: data
              }, callbackOnComplete);
              _context.prev = 5;
              _context.next = 8;
              return fetchWithTimeout(getFormEndpoint(formIdOrUrl), _objectSpread2({
                method: 'POST',
                body: data
              }, options));
            case 8:
              response = _context.sent;
              if (!(response.status === HEROTOFU_STATUS_RATELIMIT)) {
                _context.next = 18;
                break;
              }
              _context.next = 12;
              return new Promise(function (resolve) {
                return setTimeout(resolve, 10000);
              });
            case 12:
              _context.next = 14;
              return fetchWithTimeout(getFormEndpoint(formIdOrUrl), _objectSpread2({
                method: 'POST',
                body: data
              }, options));
            case 14:
              retryResponse = _context.sent;
              if (!(retryResponse.status === HEROTOFU_STATUS_RATELIMIT)) {
                _context.next = 17;
                break;
              }
              throw new Error('Too Many Requests');
            case 17:
              response = retryResponse;
            case 18:
              if (!(response.status === HEROTOFU_STATUS_SPAMBOT)) {
                _context.next = 21;
                break;
              }
              submitHtmlForm$1(getFormEndpoint(formIdOrUrl), formEvent, injectedData);
              throw new Error('Please complete the captcha challenge');
            case 21:
              if (!((response.status < 200 || response.status >= 400) && response.type !== 'opaqueredirect')) {
                _context.next = 23;
                break;
              }
              throw new Error(response.statusText);
            case 23:
              updateState({
                status: 'success',
                data: data
              }, callbackOnComplete);
              _context.next = 29;
              break;
            case 26:
              _context.prev = 26;
              _context.t0 = _context["catch"](5);
              updateState({
                status: 'error',
                error: _context.t0,
                data: data
              }, callbackOnComplete);
            case 29:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[5, 26]]);
      }));
      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();
  }, [formIdOrUrl]);
  return {
    formState: formState,
    getFormSubmitHandler: getFormSubmitHandler,
    __dangerousUpdateState: updateState
  };
}
function extractFormData(formEvent, injectedData) {
  var form = formEvent.target;
  var formData = new FormData(form);
  Object.entries(filterInjectedData(injectedData)).forEach(function (_ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
      key = _ref3[0],
      value = _ref3[1];
    formData.append(key, String(value));
  });
  return formData;
}
function submitHtmlForm$1(formAction, formEvent, injectedData) {
  var form = formEvent.target;

  // Append dynamically passed values to the form
  Object.entries(filterInjectedData(injectedData)).forEach(function (_ref4) {
    var _ref5 = _slicedToArray(_ref4, 2),
      key = _ref5[0],
      value = _ref5[1];
    // Create hidden elements for each key and append them to the form
    var el = document.createElement('input');
    el.type = 'hidden';
    el.name = key;
    el.value = String(value);
    form.appendChild(el);
  });

  // Let's submit the form again and spammer/bot will be redirected to another page automatically
  // Submitting via javascript will bypass calling this function again
  form.setAttribute('action', formAction);
  form.setAttribute('target', '_blank');
  form.setAttribute('method', 'POST');
  form.setAttribute('enctype', 'multipart/form-data');
  form.submit();
}

function useJsonData(formIdOrUrl) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _useState = react.useState({
      status: 'not_initialized'
    }),
    _useState2 = _slicedToArray(_useState, 2),
    dataState = _useState2[0],
    setDataState = _useState2[1];
  var updateState = react.useCallback(function (newState, callbackOnComplete) {
    setDataState(newState);
    if (newState.status === 'success' || newState.status === 'error') {
      callbackOnComplete === null || callbackOnComplete === void 0 || callbackOnComplete(newState);
    }
  }, []);
  var sendData = react.useCallback( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(callbackOnComplete, injectedData) {
      var data, response, retryResponse;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            data = filterInjectedData(injectedData);
            updateState({
              status: 'loading',
              data: data
            });
            _context.prev = 2;
            _context.next = 5;
            return fetchWithTimeout(getFormEndpoint(formIdOrUrl), _objectSpread2({
              method: 'POST',
              headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(data)
            }, options));
          case 5:
            response = _context.sent;
            if (!(response.status === HEROTOFU_STATUS_RATELIMIT)) {
              _context.next = 15;
              break;
            }
            _context.next = 9;
            return new Promise(function (resolve) {
              return setTimeout(resolve, 10000);
            });
          case 9:
            _context.next = 11;
            return fetchWithTimeout(getFormEndpoint(formIdOrUrl), _objectSpread2({
              method: 'POST',
              headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(data)
            }, options));
          case 11:
            retryResponse = _context.sent;
            if (!(retryResponse.status === HEROTOFU_STATUS_RATELIMIT)) {
              _context.next = 14;
              break;
            }
            throw new Error('Too Many Requests');
          case 14:
            response = retryResponse;
          case 15:
            if (!(response.status === HEROTOFU_STATUS_SPAMBOT)) {
              _context.next = 18;
              break;
            }
            submitHtmlForm(formIdOrUrl, injectedData);
            throw new Error('Please complete the captcha challenge');
          case 18:
            if (!((response.status < 200 || response.status >= 400) && response.type !== 'opaqueredirect')) {
              _context.next = 20;
              break;
            }
            throw new Error(response.statusText);
          case 20:
            updateState({
              status: 'success',
              data: data
            }, callbackOnComplete);
            _context.next = 26;
            break;
          case 23:
            _context.prev = 23;
            _context.t0 = _context["catch"](2);
            updateState({
              status: 'error',
              error: _context.t0,
              data: data
            }, callbackOnComplete);
          case 26:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[2, 23]]);
    }));
    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }(), [formIdOrUrl]);
  return {
    dataState: dataState,
    sendData: sendData,
    __dangerousUpdateState: updateState
  };
}
function submitHtmlForm(formIdOrUrl, injectedData) {
  var form = document.createElement('form');

  // Append dynamically passed values to the form
  Object.entries(filterInjectedData(injectedData)).forEach(function (_ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
      key = _ref3[0],
      value = _ref3[1];
    // Create hidden elements for each key and append them to the form
    var el = document.createElement('input');
    el.type = 'hidden';
    el.name = key;
    el.value = String(value);
    form.appendChild(el);
  });

  // Let's submit the form again and spammer/bot will be redirected to another page automatically
  // Submitting via javascript will bypass calling this function again
  form.setAttribute('action', getFormEndpoint(formIdOrUrl));
  form.setAttribute('method', 'POST');
  form.setAttribute('target', '_blank');
  document.body.appendChild(form);
  form.submit();
}

function useSubscribeEmail(formIdOrUrl) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _useJsonData = useJsonData(formIdOrUrl, options),
    subscribeState = _useJsonData.dataState,
    sendData = _useJsonData.sendData,
    __dangerousUpdateState = _useJsonData.__dangerousUpdateState;
  var subscribe = react.useCallback(function (emailToSubsribe, callbackOnComplete) {
    var email = String(emailToSubsribe).trim();
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      __dangerousUpdateState({
        status: 'error',
        error: new Error('Invalid email address'),
        data: {
          email: email
        }
      }, callbackOnComplete);
      return;
    }
    sendData(callbackOnComplete, {
      email: email
    });
  }, [formIdOrUrl]);
  return {
    subscribeState: subscribeState,
    subscribe: subscribe
  };
}

exports.useFormData = useFormData;
exports.useJsonData = useJsonData;
exports.useSubscribeEmail = useSubscribeEmail;
